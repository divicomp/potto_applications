import matplotlib.pyplot as plt
import matplotlib.ticker as mtick
from matplotlib.pyplot import figure
from teg_microbenchmarks import run_teg_heaviside_microbenchmark, run_teg_shader_swap_microbenchmark
from potto_microbenchmarks import run_potto_heaviside_microbenchmark, run_potto_shader_swap_microbenchmark
import numpy as np
import argparse


def plot_heavisides(num_heaviside=10, load_local=False):
    if load_local:
        teg_num_heavisides = np.load("teg_num_heavisides.npy")
        teg_compile_times = np.load("teg_compile_times_heavisides.npy")
        teg_eval_times = np.load("teg_eval_times_heavisides.npy")
        teg_total_times = np.load("teg_total_times_heavisides.npy")
        teg_ast_sizes = np.load("teg_ast_sizes_heavisides.npy")

        potto_num_heavisides = np.load("potto_num_heavisides.npy")
        potto_compile_times = np.load("potto_compile_times_heavisides.npy")
        potto_eval_times = np.load("potto_eval_times_heavisides.npy")
        potto_total_times = np.load("potto_total_times_heavisides.npy")
        potto_ast_sizes = np.load("potto_ast_sizes_heavisides.npy")
    else:
        teg_num_heavisides, teg_compile_times, teg_eval_times, teg_ast_sizes = run_teg_heaviside_microbenchmark(num_heaviside=num_heaviside, num_samples=10)
        potto_num_heavisides, potto_compile_times, potto_eval_times, potto_ast_sizes = run_potto_heaviside_microbenchmark(num_heaviside=num_heaviside, num_samples=10)
        teg_total_times = np.array(teg_compile_times) + np.array(teg_eval_times)
        potto_total_times = np.array(potto_compile_times) + np.array(potto_eval_times)

        np.save("teg_num_heavisides.npy", np.array(teg_num_heavisides))
        np.save("teg_compile_times_heavisides.npy", np.array(teg_compile_times))
        np.save("teg_eval_times_heavisides.npy", np.array(teg_eval_times))
        np.save("teg_total_times_heavisides.npy", np.array(teg_total_times))
        np.save("teg_ast_sizes_heavisides.npy", np.array(teg_ast_sizes))

        np.save("potto_num_heavisides.npy", np.array(potto_num_heavisides))
        np.save("potto_compile_times_heavisides.npy", np.array(potto_compile_times))
        np.save("potto_eval_times_heavisides.npy", np.array(potto_eval_times))
        np.save("potto_total_times_heavisides.npy", np.array(potto_total_times))
        np.save("potto_ast_sizes_heavisides.npy", np.array(potto_ast_sizes))

    fig, ax = plt.subplots(figsize=(8, 6))
    ax.set_xlabel("Number of Heavisides", fontsize=25)
    ax.set_ylabel("Time(s)", fontsize=25)
    ax.set_yscale('log')
    ax.set_title("Compile Time", fontsize=25)
    ax.plot(teg_num_heavisides, teg_compile_times, label="Teg", linewidth=4, color="#648FFF")
    ax.plot(potto_num_heavisides, potto_compile_times, label="Potto", linewidth=4, color="#FE6100")
    ax.spines["right"].set_visible(False)
    ax.spines["top"].set_visible(False)
    ax.spines["left"].set_linewidth(2)
    ax.spines["bottom"].set_linewidth(2)
    ax.tick_params(labelsize=20)
    ax.legend(loc="upper left", fontsize=25)
    plt.savefig("heavisides_compile_time.png", bbox_inches = "tight")

    fig, ax = plt.subplots(figsize=(8, 6))
    ax.set_xlabel("Number of Heavisides", fontsize=25)
    ax.set_ylabel("Time(s)", fontsize=25)
    ax.set_yscale('log')
    ax.set_title("Evaluation Time", fontsize=25)
    ax.plot(teg_num_heavisides, teg_eval_times, label="Teg", linewidth=4, color="#648FFF")
    ax.plot(potto_num_heavisides, potto_eval_times, label="Potto", linewidth=4, color="#FE6100")
    ax.spines["right"].set_visible(False)
    ax.spines["top"].set_visible(False)
    ax.spines["left"].set_linewidth(2)
    ax.spines["bottom"].set_linewidth(2)
    ax.tick_params(labelsize=20)
    ax.legend(loc="upper left", fontsize=25)
    plt.savefig("heavisides_eval_time.png", bbox_inches = "tight")

    fig, ax = plt.subplots(figsize=(8, 6))
    ax.set_xlabel("Number of Heavisides", fontsize=25)
    ax.set_ylabel("Size", fontsize=25)
    ax.set_title("AST Size", fontsize=25)
    ax.plot(teg_num_heavisides, teg_ast_sizes, label="Teg", linewidth=4, color="#648FFF")
    ax.plot(potto_num_heavisides, potto_ast_sizes, label="Potto", linewidth=4, color="#FE6100")
    ax.spines["right"].set_visible(False)
    ax.spines["top"].set_visible(False)
    ax.spines["left"].set_linewidth(2)
    ax.spines["bottom"].set_linewidth(2)
    ax.tick_params(labelsize=20)
    ax.legend(loc="upper left", fontsize=25)
    plt.savefig("heavisides_code_size.png", bbox_inches = "tight")

    fig, ax = plt.subplots(figsize=(8, 6))
    ax.set_xlabel("Number of Heavisides", fontsize=25)
    ax.set_ylabel("Time(s)", fontsize=25)
    ax.set_yscale('log')
    ax.set_title("Total Time", fontsize=25)
    ax.plot(teg_num_heavisides, teg_total_times, label="Teg", linewidth=4, color="#648FFF")
    ax.plot(potto_num_heavisides, potto_total_times, label="Potto", linewidth=4, color="#FE6100")
    ax.spines["right"].set_visible(False)
    ax.spines["top"].set_visible(False)
    ax.spines["left"].set_linewidth(2)
    ax.spines["bottom"].set_linewidth(2)
    ax.tick_params(labelsize=20)
    ax.legend(loc="upper left", fontsize=25)
    plt.savefig("heavisides_total_time.png", bbox_inches = "tight")


def plot_shader_swaps(num_shader_swap=10, load_local=False):
    if load_local:
        teg_num_shader_swaps = np.load("teg_num_shader_swaps.npy")
        teg_compile_times = np.load("teg_compile_times_shader_swaps.npy")
        teg_eval_times = np.load("teg_eval_times_shader_swaps.npy")
        teg_total_times = np.load("teg_total_times_shader_swaps.npy")
        teg_ast_sizes = np.load("teg_ast_sizes_shader_swaps.npy")

        potto_num_shader_swaps = np.load("potto_num_shader_swaps.npy")
        potto_compile_times = np.load("potto_compile_times_shader_swaps.npy")
        potto_eval_times = np.load("potto_eval_times_shader_swaps.npy")
        potto_total_times = np.load("potto_total_times_shader_swaps.npy")
        potto_ast_sizes = np.load("potto_ast_sizes_shader_swaps.npy")
    else:
        teg_num_shader_swaps, teg_compile_times, teg_eval_times, teg_ast_sizes = run_teg_shader_swap_microbenchmark(num_shader_swap=min(num_shader_swap, 15), num_samples=10)
        potto_num_shader_swaps, potto_compile_times, potto_eval_times, potto_ast_sizes = run_potto_shader_swap_microbenchmark(num_shader_swap=num_shader_swap, num_samples=10)
        teg_total_times = np.array(teg_compile_times) + np.array(teg_eval_times)
        potto_total_times = np.array(potto_compile_times) + np.array(potto_eval_times)

        np.save("teg_num_shader_swaps.npy", np.array(teg_num_shader_swaps))
        np.save("teg_compile_times_shader_swaps.npy", np.array(teg_compile_times))
        np.save("teg_eval_times_shader_swaps.npy", np.array(teg_eval_times))
        np.save("teg_total_times_shader_swaps.npy", np.array(teg_total_times))
        np.save("teg_ast_sizes_shader_swaps.npy", np.array(teg_ast_sizes))

        np.save("potto_num_shader_swaps.npy", np.array(potto_num_shader_swaps))
        np.save("potto_compile_times_shader_swaps.npy", np.array(potto_compile_times))
        np.save("potto_eval_times_shader_swaps.npy", np.array(potto_eval_times))
        np.save("potto_total_times_shader_swaps.npy", np.array(potto_total_times))
        np.save("potto_ast_sizes_shader_swaps.npy", np.array(potto_ast_sizes))

    fig, ax = plt.subplots(figsize=(8, 6))
    ax.set_xlabel("Number of Shader Swaps", fontsize=25)
    ax.set_ylabel("Time(s)", fontsize=25)
    ax.set_yscale('log')
    ax.set_title("Compile Time", fontsize=25)
    ax.plot(teg_num_shader_swaps, teg_compile_times, label="Teg", linewidth=4, color="#648FFF")
    ax.plot(potto_num_shader_swaps, potto_compile_times, label="Potto", linewidth=4, color="#FE6100")
    ax.spines["right"].set_visible(False)
    ax.spines["top"].set_visible(False)
    ax.spines["left"].set_linewidth(2)
    ax.spines["bottom"].set_linewidth(2)
    ax.tick_params(labelsize=20)
    ax.legend(loc="upper right", fontsize=25)
    plt.savefig("shader_swaps_compile_time.png", bbox_inches = "tight")

    fig, ax = plt.subplots(figsize=(8, 6))
    ax.set_xlabel("Number of Shader Swaps", fontsize=25)
    ax.set_ylabel("Time(s)", fontsize=25)
    ax.set_yscale('log')
    ax.set_title("Evaluation Time", fontsize=25)
    ax.plot(teg_num_shader_swaps, teg_eval_times, label="Teg", linewidth=4, color="#648FFF")
    ax.plot(potto_num_shader_swaps, potto_eval_times, label="Potto", linewidth=4, color="#FE6100")
    ax.spines["right"].set_visible(False)
    ax.spines["top"].set_visible(False)
    ax.spines["left"].set_linewidth(2)
    ax.spines["bottom"].set_linewidth(2)
    ax.tick_params(labelsize=20)
    ax.legend(loc="upper right", fontsize=25)
    plt.savefig("shader_swaps_eval_time.png", bbox_inches = "tight")

    fig, ax = plt.subplots(figsize=(8, 6))
    ax.set_xlabel("Number of Shader Swaps", fontsize=25)
    ax.set_ylabel("Size", fontsize=25)
    ax.set_title("AST Size", fontsize=25)
    ax.plot(teg_num_shader_swaps, teg_ast_sizes, label="Teg", linewidth=4, color="#648FFF")
    ax.plot(potto_num_shader_swaps, potto_ast_sizes, label="Potto", linewidth=4, color="#FE6100")
    ax.spines["right"].set_visible(False)
    ax.spines["top"].set_visible(False)
    ax.spines["left"].set_linewidth(2)
    ax.spines["bottom"].set_linewidth(2)
    ax.tick_params(labelsize=20)
    ax.legend(loc="upper left", fontsize=25)
    plt.savefig("shader_swaps_code_size.png", bbox_inches = "tight")

    fig, ax = plt.subplots(figsize=(8, 6))
    ax.set_xlabel("Number of Shader Swaps", fontsize=25)
    ax.set_ylabel("Time(s)", fontsize=25)
    ax.set_yscale('log')
    ax.set_title("Total Time", fontsize=25)
    ax.plot(teg_num_shader_swaps, teg_total_times, label="Teg", linewidth=4, color="#648FFF")
    ax.plot(potto_num_shader_swaps, potto_total_times, label="Potto", linewidth=4, color="#FE6100")
    ax.spines["right"].set_visible(False)
    ax.spines["top"].set_visible(False)
    ax.spines["left"].set_linewidth(2)
    ax.spines["bottom"].set_linewidth(2)
    ax.tick_params(labelsize=20)
    ax.legend(loc="upper right", fontsize=25)
    plt.savefig("shader_swaps_total_time.png", bbox_inches = "tight")


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--load", action="store_true", help="Load local results from previous run")
    args = parser.parse_args()
    plot_heavisides(50, args.load)
    plot_shader_swaps(50, args.load)
